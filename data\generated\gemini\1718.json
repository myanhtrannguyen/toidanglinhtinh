{
    "solution_id": "gemini-1718",
    "problem_id": "p04009",
    "language": "C++",
    "solution": "```cpp\n#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nint main() {\n  int h, w;\n  cin >> h >> w;\n\n  vector<string> grid(h);\n  for (int i = 0; i < h; ++i) {\n    cin >> grid[i];\n  }\n\n  int max_saved = 0;\n  for (int i = 0; i < (1 << (2 * (h + w))); ++i) {\n    int saved = 0;\n    vector<string> current_grid = grid;\n    vector<pair<int, int>> robots;\n    pair<int, int> exit_pos;\n\n    for (int r = 0; r < h; ++r) {\n      for (int c = 0; c < w; ++c) {\n        if (current_grid[r][c] == 'o') {\n          robots.push_back({r, c});\n        } else if (current_grid[r][c] == 'E') {\n          exit_pos = {r, c};\n        }\n      }\n    }\n\n    vector<int> moves;\n    int temp = i;\n    for (int j = 0; j < h + w; ++j) {\n        moves.push_back(temp % 4);\n        temp /= 4;\n    }\n\n    vector<pair<int,int>> current_robots = robots;\n    bool possible = true;\n    for(int move_index : moves){\n        vector<pair<int,int>> next_robots;\n        for(auto robot : current_robots){\n            int next_r = robot.first;\n            int next_c = robot.second;\n            if(move_index == 0) next_r--;\n            else if(move_index == 1) next_r++;\n            else if(move_index == 2) next_c--;\n            else next_c++;\n\n            if(next_r >= 0 && next_r < h && next_c >= 0 && next_c < w){\n                if(next_r == exit_pos.first && next_c == exit_pos.second) saved++;\n                else next_robots.push_back({next_r, next_c});\n            }\n        }\n        current_robots = next_robots;\n    }\n    max_saved = max(max_saved, saved);\n  }\n  cout << max_saved << endl;\n  return 0;\n}\n```",
    "model": "gemini-1.5-flash",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct, and follows standard conventions for the specified language. Do not include any introductory text or output besides the code itself."
}