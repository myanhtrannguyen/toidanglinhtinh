{
    "solution_id": "gemini-451",
    "problem_id": "p03670",
    "language": "Java",
    "solution": "```java\nimport java.util.*;\n\npublic class Main {\n    static final int MOD = 1000000007;\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int m = sc.nextInt();\n        int k = sc.nextInt();\n        Map<Pair, Integer> conditions = new HashMap<>();\n        for (int i = 0; i < k; i++) {\n            int a = sc.nextInt();\n            int b = sc.nextInt();\n            int c = sc.nextInt();\n            conditions.put(new Pair(a, b), c);\n        }\n        long count = 0;\n        int[][] paths = new int[m][n];\n        generatePaths(paths, 0, conditions, n, m, count);\n        System.out.println(count % MOD);\n    }\n\n    static void generatePaths(int[][] paths, int row, Map<Pair, Integer> conditions, int n, int m, long count) {\n        if (row == m) {\n            if (isValid(paths, n, m)) {\n                count++;\n            }\n            return;\n        }\n        paths[row][0] = 1;\n        for (int i = 1; i < n; i++) {\n            int prev = paths[row][i - 1];\n            paths[row][i] = prev;\n            generatePaths(paths, row + 1, conditions, n, m, count);\n            paths[row][i] = prev + 1;\n            generatePaths(paths, row + 1, conditions, n, m, count);\n            paths[row][i] = prev;\n        }\n\n    }\n\n\n    static boolean isValid(int[][] paths, int n, int m) {\n        for (int j = 0; j < n; j++) {\n            for (int i = 1; i < m; i++) {\n                if (paths[i][j] < paths[i - 1][j]) {\n                    return false;\n                }\n            }\n        }\n        return true;\n\n    }\n\n    static class Pair {\n        int first;\n        int second;\n\n        Pair(int first, int second) {\n            this.first = first;\n            this.second = second;\n        }\n\n        @Override\n        public boolean equals(Object o) {\n            if (this == o) return true;\n            if (o == null || getClass() != o.getClass()) return false;\n            Pair pair = (Pair) o;\n            return first == pair.first && second == pair.second;\n        }\n\n        @Override\n        public int hashCode() {\n            return Objects.hash(first, second);\n        }\n    }\n}\n```",
    "model": "gemini-1.5-flash",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct, and follows standard conventions for the specified language. Do not include any introductory text or output besides the code itself."
}