{
    "solution_id": "gemini-1406",
    "problem_id": "p03927",
    "language": "Java",
    "solution": "```java\nimport java.util.*;\nimport java.math.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int H = sc.nextInt();\n        int W = sc.nextInt();\n        char[][] grid = new char[H][W];\n        for (int i = 0; i < H; i++) {\n            String s = sc.next();\n            for (int j = 0; j < W; j++) {\n                grid[i][j] = s.charAt(j);\n            }\n        }\n\n        Set<String> states = new HashSet<>();\n        Queue<Pair> q = new LinkedList<>();\n        q.offer(new Pair(grid));\n        states.add(encode(grid));\n\n        while (!q.isEmpty()) {\n            Pair p = q.poll();\n            char[][] cur = p.grid;\n\n            // Row reverse\n            for (int i = 0; i < H; i++) {\n                char[][] next = reverseRow(cur, i);\n                String encoded = encode(next);\n                if (!states.contains(encoded)) {\n                    states.add(encoded);\n                    q.offer(new Pair(next));\n                }\n            }\n\n            // Column reverse\n            for (int j = 0; j < W; j++) {\n                char[][] next = reverseCol(cur, j);\n                String encoded = encode(next);\n                if (!states.contains(encoded)) {\n                    states.add(encoded);\n                    q.offer(new Pair(next));\n                }\n            }\n        }\n        System.out.println(states.size());\n    }\n\n    static char[][] reverseRow(char[][] grid, int row) {\n        char[][] newGrid = new char[grid.length][grid[0].length];\n        for (int i = 0; i < grid.length; i++) {\n            System.arraycopy(grid[i], 0, newGrid[i], 0, grid[0].length);\n        }\n        for (int i = 0; i < grid[row].length / 2; i++) {\n            char temp = newGrid[row][i];\n            newGrid[row][i] = newGrid[row][grid[row].length - 1 - i];\n            newGrid[row][grid[row].length - 1 - i] = temp;\n        }\n        return newGrid;\n    }\n\n    static char[][] reverseCol(char[][] grid, int col) {\n        char[][] newGrid = new char[grid.length][grid[0].length];\n        for (int i = 0; i < grid.length; i++) {\n            System.arraycopy(grid[i], 0, newGrid[i], 0, grid[0].length);\n        }\n        for (int i = 0; i < grid.length / 2; i++) {\n            char temp = newGrid[i][col];\n            newGrid[i][col] = newGrid[grid.length - 1 - i][col];\n            newGrid[grid.length - 1 - i][col] = temp;\n        }\n        return newGrid;\n    }\n\n    static String encode(char[][] grid) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < grid.length; i++) {\n            for (int j = 0; j < grid[0].length; j++) {\n                sb.append(grid[i][j]);\n            }\n        }\n        return sb.toString();\n    }\n\n    static class Pair {\n        char[][] grid;\n\n        Pair(char[][] grid) {\n            this.grid = grid;\n        }\n    }\n}\n```",
    "model": "gemini-1.5-flash",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct, and follows standard conventions for the specified language. Do not include any introductory text or output besides the code itself."
}