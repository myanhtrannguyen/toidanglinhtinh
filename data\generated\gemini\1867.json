{
    "solution_id": "gemini-1867",
    "problem_id": "p04049",
    "language": "Java",
    "solution": "```java\nimport java.util.*;\n\npublic class Main {\n    static int n, k;\n    static ArrayList<Integer>[] adj;\n    static int[] parent;\n    static int maxDist;\n    static int farthestNode;\n\n    static void dfs(int u, int p, int dist) {\n        if (dist > maxDist) {\n            maxDist = dist;\n            farthestNode = u;\n        }\n        parent[u] = p;\n        for (int v : adj[u]) {\n            if (v != p) {\n                dfs(v, u, dist + 1);\n            }\n        }\n    }\n\n    static int getDiameter(int u) {\n        maxDist = 0;\n        farthestNode = u;\n        dfs(u, -1, 0);\n        maxDist = 0;\n        dfs(farthestNode, -1, 0);\n        return maxDist;\n    }\n\n    static int solve(int mask) {\n        ArrayList<Integer> nodes = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            if ((mask >> i & 1) == 1) {\n                nodes.add(i + 1);\n            }\n        }\n        if (nodes.size() == 0) return n;\n\n        ArrayList<Integer>[] newAdj = new ArrayList[n + 1];\n        for (int i = 1; i <= n; i++) {\n            newAdj[i] = new ArrayList<>();\n        }\n        for (int i = 1; i <= n; i++) {\n            for (int j : adj[i]) {\n                boolean ok = true;\n                if (nodes.contains(i) && nodes.contains(j)) {\n                    newAdj[i].add(j);\n                    newAdj[j].add(i);\n                }\n            }\n        }\n        if(nodes.size() == 1) return n-1;\n\n        boolean connected = true;\n        boolean[] visited = new boolean[n + 1];\n        Queue<Integer> q = new LinkedList<>();\n        q.add(nodes.get(0));\n        visited[nodes.get(0)] = true;\n        int count = 0;\n        while (!q.isEmpty()) {\n            int u = q.poll();\n            count++;\n            for (int v : newAdj[u]) {\n                if (!visited[v] && nodes.contains(v)) {\n                    visited[v] = true;\n                    q.add(v);\n                }\n            }\n        }\n\n        for (int u : nodes) {\n            if (!visited[u]) connected = false;\n        }\n        \n        if (!connected) return n;\n\n        if (getDiameter(nodes.get(0)) <= k) {\n            return n - nodes.size();\n        } else {\n            return n;\n        }\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        n = sc.nextInt();\n        k = sc.nextInt();\n        adj = new ArrayList[n + 1];\n        for (int i = 1; i <= n; i++) {\n            adj[i] = new ArrayList<>();\n        }\n        for (int i = 0; i < n - 1; i++) {\n            int u = sc.nextInt();\n            int v = sc.nextInt();\n            adj[u].add(v);\n            adj[v].add(u);\n        }\n        parent = new int[n + 1];\n        int ans = n;\n        for (int i = 0; i < (1 << n); i++) {\n            ans = Math.min(ans, solve(i));\n        }\n        System.out.println(ans);\n    }\n}\n```",
    "model": "gemini-1.5-flash",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct, and follows standard conventions for the specified language. Do not include any introductory text or output besides the code itself."
}