{
    "solution_id": "gemini-629",
    "problem_id": "p03718",
    "language": "Java",
    "solution": "```java\nimport java.util.*;\nimport java.lang.*;\n\nclass Main {\n    static int H, W;\n    static char[][] pond;\n    static int[] dx = {0, 0, 1, -1};\n    static int[] dy = {1, -1, 0, 0};\n    static int sx, sy, tx, ty;\n\n    static boolean isValid(int x, int y) {\n        return x >= 0 && x < H && y >= 0 && y < W;\n    }\n\n    static int bfs(char[][] currentPond) {\n        Queue<int[]> q = new LinkedList<>();\n        q.offer(new int[]{sx, sy});\n        boolean[][] visited = new boolean[H][W];\n        visited[sx][sy] = true;\n        int count = 0;\n\n        while (!q.isEmpty()) {\n            int[] curr = q.poll();\n            int x = curr[0];\n            int y = curr[1];\n\n            if (x == tx && y == ty) return 0;\n\n            for (int i = 0; i < 4; i++) {\n                int nx = x + dx[i];\n                int ny = y + dy[i];\n                while (isValid(nx, ny)) {\n                    if (currentPond[nx][ny] != '.') {\n                        if (!visited[nx][ny]) {\n                            visited[nx][ny] = true;\n                            q.offer(new int[]{nx, ny});\n                        }\n                        break;\n                    }\n                    nx += dx[i];\n                    ny += dy[i];\n                }\n            }\n        }\n        return 1;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        H = sc.nextInt();\n        W = sc.nextInt();\n        pond = new char[H][W];\n        List<int[]> leaves = new ArrayList<>();\n\n        for (int i = 0; i < H; i++) {\n            String row = sc.next();\n            for (int j = 0; j < W; j++) {\n                pond[i][j] = row.charAt(j);\n                if (pond[i][j] == 'S') {\n                    sx = i;\n                    sy = j;\n                } else if (pond[i][j] == 'T') {\n                    tx = i;\n                    ty = j;\n                } else if (pond[i][j] == 'o') {\n                    leaves.add(new int[]{i, j});\n                }\n            }\n        }\n\n        int minRemoved = Integer.MAX_VALUE;\n        for (int i = 0; i < (1 << leaves.size()); i++) {\n            char[][] currentPond = new char[H][W];\n            for (int r = 0; r < H; r++) {\n                System.arraycopy(pond[r], 0, currentPond[r], 0, W);\n            }\n            int removedCount = 0;\n            for (int j = 0; j < leaves.size(); j++) {\n                if ((i >> j) % 2 == 1) {\n                    currentPond[leaves.get(j)[0]][leaves.get(j)[1]] = '.';\n                    removedCount++;\n                }\n            }\n            if (bfs(currentPond) == 1) {\n                minRemoved = Math.min(minRemoved, removedCount);\n            }\n        }\n\n        if (minRemoved == Integer.MAX_VALUE) {\n            System.out.println(-1);\n        } else {\n            System.out.println(minRemoved);\n        }\n    }\n}\n```",
    "model": "gemini-1.5-flash",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct, and follows standard conventions for the specified language. Do not include any introductory text or output besides the code itself."
}