{
    "solution_id": "gemini-1395",
    "problem_id": "p03924",
    "language": "Java",
    "solution": "```java\nimport java.util.*;\nimport java.lang.*;\n\nclass Main {\n    static final int MOD = 1000000007;\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int m = sc.nextInt();\n\n        long count = 0;\n        List<Integer> path = new ArrayList<>();\n        dfs(n, m, 1, path, new boolean[n + 1][n + 1], count);\n\n        System.out.println(count);\n\n    }\n\n    static void dfs(int n, int m, int current, List<Integer> path, boolean[][] adj, long count) {\n\n        if (path.size() == m) {\n            if (isConnected(n, adj)) {\n                count++;\n            }\n            return;\n\n        }\n\n        for (int i = 1; i <= n; i++) {\n            List<Integer> newPath = new ArrayList<>(path);\n            newPath.add(i);\n            boolean[][] newAdj = copyAdj(adj);\n            if (current != i) {\n                newAdj[current][i] = true;\n            }\n            dfs(n, m, i, newPath, newAdj, count);\n        }\n\n    }\n\n\n    static boolean isConnected(int n, boolean[][] adj) {\n        for (int i = 1; i <= n; i++) {\n            for (int j = 1; j <= n; j++) {\n                if (i == j) continue;\n                if (!canReach(i, j, n, adj)) return false;\n            }\n        }\n        return true;\n    }\n\n    static boolean canReach(int start, int end, int n, boolean[][] adj) {\n        boolean[] visited = new boolean[n + 1];\n        Queue<Integer> q = new LinkedList<>();\n        q.offer(start);\n        visited[start] = true;\n        while (!q.isEmpty()) {\n            int curr = q.poll();\n            if (curr == end) return true;\n            for (int i = 1; i <= n; i++) {\n                if (adj[curr][i] && !visited[i]) {\n                    visited[i] = true;\n                    q.offer(i);\n                }\n            }\n        }\n        return false;\n    }\n\n    static boolean[][] copyAdj(boolean[][] adj) {\n        int n = adj.length;\n        boolean[][] newAdj = new boolean[n][n];\n        for (int i = 0; i < n; i++) {\n            System.arraycopy(adj[i], 0, newAdj[i], 0, n);\n        }\n        return newAdj;\n    }\n}\n```",
    "model": "gemini-1.5-flash",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct, and follows standard conventions for the specified language. Do not include any introductory text or output besides the code itself."
}