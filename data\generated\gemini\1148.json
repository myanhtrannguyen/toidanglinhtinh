{
    "solution_id": "gemini-1148",
    "problem_id": "p03855",
    "language": "Java",
    "solution": "```java\nimport java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int k = sc.nextInt();\n        int l = sc.nextInt();\n        List<int[]> roads = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            roads.add(new int[]{sc.nextInt(), sc.nextInt()});\n        }\n        List<int[]> railways = new ArrayList<>();\n        for (int i = 0; i < l; i++) {\n            railways.add(new int[]{sc.nextInt(), sc.nextInt()});\n        }\n        sc.close();\n\n        int[] roadConnected = new int[n + 1];\n        int[] railConnected = new int[n + 1];\n        for (int i = 1; i <= n; i++) {\n            roadConnected[i] = i;\n            railConnected[i] = i;\n        }\n\n        for (int[] road : roads) {\n            int root1 = find(roadConnected, road[0]);\n            int root2 = find(roadConnected, road[1]);\n            if (root1 != root2) {\n                roadConnected[root1] = root2;\n            }\n        }\n        for (int[] railway : railways) {\n            int root1 = find(railConnected, railway[0]);\n            int root2 = find(railConnected, railway[1]);\n            if (root1 != root2) {\n                railConnected[root1] = root2;\n            }\n        }\n\n        for (int i = 1; i <= n; i++) {\n            int roadRoot = find(roadConnected, i);\n            int railRoot = find(railConnected, i);\n            int count = 0;\n            for (int j = 1; j <= n; j++) {\n                if (find(roadConnected, j) == roadRoot && find(railConnected, j) == railRoot) {\n                    count++;\n                }\n            }\n            System.out.print(count + \" \");\n        }\n        System.out.println();\n    }\n\n    static int find(int[] parent, int i) {\n        if (parent[i] == i) {\n            return i;\n        }\n        return parent[i] = find(parent, parent[i]);\n    }\n}\n```",
    "model": "gemini-1.5-flash",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct, and follows standard conventions for the specified language. Do not include any introductory text or output besides the code itself."
}