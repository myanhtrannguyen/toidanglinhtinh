{
    "solution_id": "gemini-913",
    "problem_id": "p03792",
    "language": "Java",
    "solution": "```java\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        int n = Integer.parseInt(br.readLine());\n        char[][] grid = new char[n][n];\n        for (int i = 0; i < n; i++) {\n            String line = br.readLine();\n            for (int j = 0; j < n; j++) {\n                grid[i][j] = line.charAt(j);\n            }\n        }\n\n        int ans = solve(grid);\n        System.out.println(ans);\n    }\n\n    static int solve(char[][] grid) {\n        int n = grid.length;\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (grid[0][i] == '.') {\n                count++;\n            }\n        }\n\n        if (count == 0) return 0;\n\n        Queue<char[][]> q = new LinkedList<>();\n        q.offer(grid);\n        Set<String> visited = new HashSet<>();\n        visited.add(Arrays.deepToString(grid));\n\n        int steps = 0;\n        while (!q.isEmpty()) {\n            int size = q.size();\n            for (int i = 0; i < size; i++) {\n                char[][] curr = q.poll();\n                boolean allBlack = true;\n                for (int r = 0; r < n; r++) {\n                    for (int c = 0; c < n; c++) {\n                        if (curr[r][c] == '.') {\n                            allBlack = false;\n                            break;\n                        }\n                    }\n                    if (!allBlack) break;\n                }\n                if (allBlack) return steps;\n\n                for (int r = 0; r < n; r++) {\n                    char[] row = curr[r].clone();\n                    for (int c = 0; c < n; c++) {\n                        char[][] next = copyGrid(curr);\n                        for (int k = 0; k < n; k++) {\n                            next[k][c] = row[k];\n                        }\n                        String nextStr = Arrays.deepToString(next);\n                        if (!visited.contains(nextStr)) {\n                            visited.add(nextStr);\n                            q.offer(next);\n                        }\n                    }\n                }\n            }\n            steps++;\n        }\n        return -1;\n    }\n\n\n    static char[][] copyGrid(char[][] grid) {\n        int n = grid.length;\n        char[][] copy = new char[n][n];\n        for (int i = 0; i < n; i++) {\n            System.arraycopy(grid[i], 0, copy[i], 0, n);\n        }\n        return copy;\n    }\n}\n```",
    "model": "gemini-1.5-flash",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct, and follows standard conventions for the specified language. Do not include any introductory text or output besides the code itself."
}