{
    "solution_id": "gemini-1461",
    "problem_id": "p03941",
    "language": "Java",
    "solution": "```java\nimport java.util.*;\n\npublic class Main {\n    static int n;\n    static int[] a;\n    static int[] v;\n    static List<Integer>[] g;\n    static List<Integer> leaves;\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        n = sc.nextInt();\n        a = new int[n];\n        v = new int[n];\n        g = new ArrayList[n + 1];\n        for (int i = 1; i <= n; i++) {\n            g[i] = new ArrayList<>();\n        }\n        for (int i = 0; i < n - 1; i++) {\n            a[i] = sc.nextInt();\n            v[i] = sc.nextInt();\n            g[a[i]].add(i + 2);\n            g[i + 2].add(a[i]);\n        }\n        leaves = new ArrayList<>();\n        dfs(1, -1);\n        int m = leaves.size();\n        int[] p = new int[m];\n        for (int i = 0; i < m; i++) {\n            p[i] = i;\n        }\n        int ans = Integer.MAX_VALUE;\n        do {\n            int maxCost = 0;\n            boolean ok = true;\n            List<Integer> path = new ArrayList<>();\n            path.add(1);\n            for (int i = 0; i < m; i++) {\n                int leaf = leaves.get(p[i]);\n                List<Integer> curPath = getPath(1, leaf);\n                path.addAll(curPath.subList(1, curPath.size()));\n            }\n            path.add(1);\n            int curCost = 0;\n            List<Integer> edges = new ArrayList<>();\n            for (int i = 0; i < path.size() - 1; i++) {\n                int u = path.get(i);\n                int next = path.get(i + 1);\n                int edgeIndex = -1;\n                for (int j = 0; j < g[u].size(); j++) {\n                    if (g[u].get(j) == next) {\n                        edgeIndex = g[u].get(j) -1;\n                        break;\n                    }\n                }\n                if (edgeIndex == -1) {\n                    for (int j = 0; j < g[next].size(); j++) {\n                        if (g[next].get(j) == u) {\n                            edgeIndex = g[next].get(j) -1;\n                            break;\n                        }\n                    }\n                }\n                curCost += v[edgeIndex];\n                edges.add(edgeIndex);\n\n            }\n            int[] edgeCount = new int[n-1];\n            for (int edge : edges) {\n                edgeCount[edge]++;\n            }\n            for (int count : edgeCount) {\n                if (count != 2) {\n                    ok = false;\n                    break;\n                }\n            }\n            if (ok) {\n                int dayCost = 0;\n                int day = 0;\n                int maxDayCost = 0;\n                for (int i = 0; i < edges.size(); i++) {\n                    dayCost += v[edges.get(i)];\n                    if (path.get(i+1) == 1) {\n                        maxDayCost = Math.max(maxDayCost, dayCost);\n                        dayCost = 0;\n                    }\n                }\n                ans = Math.min(ans, maxDayCost);\n            }\n        } while (nextPermutation(p));\n        System.out.println(ans);\n    }\n\n    static void dfs(int u, int p) {\n        boolean isLeaf = true;\n        for (int v : g[u]) {\n            if (v != p) {\n                isLeaf = false;\n                dfs(v, u);\n            }\n        }\n        if (isLeaf) {\n            leaves.add(u);\n        }\n    }\n\n    static List<Integer> getPath(int start, int end) {\n        List<Integer> path = new ArrayList<>();\n        Queue<Integer> q = new LinkedList<>();\n        Map<Integer, Integer> parent = new HashMap<>();\n        q.offer(start);\n        parent.put(start, -1);\n        while (!q.isEmpty()) {\n            int u = q.poll();\n            if (u == end) {\n                int cur = end;\n                while (cur != -1) {\n                    path.add(cur);\n                    cur = parent.get(cur);\n                }\n                Collections.reverse(path);\n                return path;\n            }\n            for (int v : g[u]) {\n                if (!parent.containsKey(v)) {\n                    parent.put(v, u);\n                    q.offer(v);\n                }\n            }\n        }\n        return path;\n    }\n\n    static boolean nextPermutation(int[] p) {\n        int i = p.length - 2;\n        while (i >= 0 && p[i] >= p[i + 1]) {\n            i--;\n        }\n        if (i < 0) {\n            return false;\n        }\n        int j = p.length - 1;\n        while (p[j] <= p[i]) {\n            j--;\n        }\n        swap(p, i, j);\n        reverse(p, i + 1);\n        return true;\n    }\n\n    static void swap(int[] p, int i, int j) {\n        int temp = p[i];\n        p[i] = p[j];\n        p[j] = temp;\n    }\n\n    static void reverse(int[] p, int start) {\n        int end = p.length - 1;\n        while (start < end) {\n            swap(p, start, end);\n            start++;\n            end--;\n        }\n    }\n}\n```",
    "model": "gemini-1.5-flash",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct, and follows standard conventions for the specified language. Do not include any introductory text or output besides the code itself."
}