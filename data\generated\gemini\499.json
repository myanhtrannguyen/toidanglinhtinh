{
    "solution_id": "gemini-499",
    "problem_id": "p03684",
    "language": "C",
    "solution": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <limits.h>\n\ntypedef struct {\n    long long x, y;\n} Point;\n\nlong long min(long long a, long long b) {\n    return a < b ? a : b;\n}\n\nlong long dist(Point p1, Point p2) {\n    return min(abs(p1.x - p2.x), abs(p1.y - p2.y));\n}\n\nint get_parent(int parent[], int i) {\n    if (parent[i] == i)\n        return i;\n    return parent[i] = get_parent(parent, parent[i]);\n}\n\nvoid unite_sets(int parent[], int rank[], int a, int b) {\n    a = get_parent(parent, a);\n    b = get_parent(parent, b);\n    if (a != b) {\n        if (rank[a] < rank[b])\n            parent[a] = b;\n        else if (rank[a] > rank[b])\n            parent[b] = a;\n        else {\n            parent[b] = a;\n            rank[a]++;\n        }\n    }\n}\n\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    Point points[n];\n    for (int i = 0; i < n; i++) {\n        scanf(\"%lld %lld\", &points[i].x, &points[i].y);\n    }\n\n    long long edges[n * (n - 1) / 2][3];\n    int k = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            edges[k][0] = dist(points[i], points[j]);\n            edges[k][1] = i;\n            edges[k][2] = j;\n            k++;\n        }\n    }\n\n    qsort(edges, k, sizeof(edges[0]), [](const void *a, const void *b) {\n        return ((long long *)a)[0] - ((long long *)b)[0];\n    });\n\n    int parent[n];\n    int rank[n];\n    for (int i = 0; i < n; i++) {\n        parent[i] = i;\n        rank[i] = 0;\n    }\n\n    long long total_cost = 0;\n    for (int i = 0; i < k; i++) {\n        if (get_parent(parent, edges[i][1]) != get_parent(parent, edges[i][2])) {\n            total_cost += edges[i][0];\n            unite_sets(parent, rank, edges[i][1], edges[i][2]);\n        }\n    }\n    printf(\"%lld\\n\", total_cost);\n    return 0;\n}\n```",
    "model": "gemini-1.5-flash",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct, and follows standard conventions for the specified language. Do not include any introductory text or output besides the code itself."
}