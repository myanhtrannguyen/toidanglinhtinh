{
    "solution_id": "gemini-1065",
    "problem_id": "p03833",
    "language": "Java",
    "solution": "```java\nimport java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int N = sc.nextInt();\n        int M = sc.nextInt();\n        long[] A = new long[N - 1];\n        for (int i = 0; i < N - 1; i++) {\n            A[i] = sc.nextLong();\n        }\n        long[][] B = new long[N][M];\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < M; j++) {\n                B[i][j] = sc.nextLong();\n            }\n        }\n        long maxHappiness = Long.MIN_VALUE;\n        for (int i = 0; i < (1 << M); i++) {\n            long currentHappiness = 0;\n            long currentDistance = 0;\n            int currentRestaurant = 0;\n            List<Integer> usedTickets = new ArrayList<>();\n            for (int j = 0; j < M; j++) {\n                if ((i >> j) % 2 == 1) {\n                    usedTickets.add(j);\n                }\n            }\n            if (usedTickets.isEmpty()) continue;\n            \n            long[][] dp = new long[N][1 << M];\n            for (int k = 0; k < N; k++) {\n                Arrays.fill(dp[k], Long.MIN_VALUE);\n            }\n            dp[0][0] = 0;\n            for (int k = 0; k < N; k++) {\n                for (int mask = 0; mask < (1 << M); mask++) {\n                    if (dp[k][mask] == Long.MIN_VALUE) continue;\n                    for (int nextRestaurant = 0; nextRestaurant < N; nextRestaurant++) {\n                        long nextMask = mask;\n                        long nextHappiness = dp[k][mask];\n                        long nextDistance = currentDistance;\n                        if (k != nextRestaurant) {\n                            long dist = 0;\n                            for (int l = Math.min(k, nextRestaurant); l < Math.max(k, nextRestaurant); l++) {\n                                dist += A[l];\n                            }\n                            nextDistance += dist;\n                        }\n                        for (int ticketIndex : usedTickets) {\n                            if ((mask >> ticketIndex) % 2 == 0) {\n                                nextHappiness += B[nextRestaurant][ticketIndex];\n                                nextMask |= (1 << ticketIndex);\n                            }\n                        }\n                        dp[nextRestaurant][nextMask] = Math.max(dp[nextRestaurant][nextMask], nextHappiness - nextDistance);\n                    }\n                }\n            }\n            for(int k=0; k<N; ++k) maxHappiness = Math.max(maxHappiness, dp[k][(1<<M)-1]);\n        }\n        System.out.println(maxHappiness);\n    }\n}\n```",
    "model": "gemini-1.5-flash",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct, and follows standard conventions for the specified language. Do not include any introductory text or output besides the code itself."
}