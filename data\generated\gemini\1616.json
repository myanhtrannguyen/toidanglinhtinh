{
    "solution_id": "gemini-1616",
    "problem_id": "p03982",
    "language": "C",
    "solution": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\nlong long abs_diff(long long a, long long b) {\n    return (a > b) ? (a - b) : (b - a);\n}\n\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n\n    long long *a = (long long *)malloc(n * sizeof(long long));\n    for (int i = 0; i < n; i++) {\n        scanf(\"%lld\", &a[i]);\n    }\n\n    long long *b = (long long *)malloc(n * sizeof(long long));\n    for (int i = 0; i < n; i++) {\n        scanf(\"%lld\", &b[i]);\n    }\n\n    long long total_cost = 0;\n    long long *diff = (long long *)malloc(n * sizeof(long long));\n    for (int i = 0; i < n; i++) {\n        diff[i] = a[i] - b[i];\n    }\n\n    long long pos_sum = 0;\n    long long neg_sum = 0;\n    for (int i = 0; i < n; i++) {\n        if (diff[i] > 0) {\n            pos_sum += diff[i];\n        } else {\n            neg_sum -= diff[i];\n        }\n    }\n\n    long long pos_idx = 0;\n    long long neg_idx = 0;\n    long long cur_pos_sum = 0;\n    long long cur_neg_sum = 0;\n\n    for (int i = 0; i < n; i++) {\n        if (diff[i] > 0) {\n            long long transfer = (cur_neg_sum < diff[i]) ? cur_neg_sum : diff[i];\n            total_cost += transfer * i;\n            cur_neg_sum -= transfer;\n            diff[i] -= transfer;\n        }\n    }\n    for (int i = n - 1; i >= 0; i--) {\n        if (diff[i] < 0) {\n            long long transfer = (cur_pos_sum < -diff[i]) ? cur_pos_sum : -diff[i];\n            total_cost += transfer * (n - 1 - i);\n            cur_pos_sum -= transfer;\n            diff[i] += transfer;\n        }\n    }\n\n\n    printf(\"%lld\\n\", total_cost);\n    free(a);\n    free(b);\n    free(diff);\n    return 0;\n}\n```",
    "model": "gemini-1.5-flash",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct, and follows standard conventions for the specified language. Do not include any introductory text or output besides the code itself."
}