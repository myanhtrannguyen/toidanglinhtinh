{
    "solution_id": "gemini-909",
    "problem_id": "p03791",
    "language": "Java",
    "solution": "```java\nimport java.util.*;\nimport java.math.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int[] x = new int[n];\n        for (int i = 0; i < n; i++) {\n            x[i] = sc.nextInt();\n        }\n        long mod = 1000000007;\n        long ans = 0;\n        List<Integer> p = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            p.add(i);\n        }\n        \n        do {\n            boolean ok = true;\n            int[] cur = new int[n];\n            for (int i = 0; i < n; i++) {\n                cur[i] = x[p.get(i)];\n            }\n            int[] fin = new int[n];\n            Arrays.fill(fin, 0);\n            int cnt = 0;\n            List<Integer> used = new ArrayList<>();\n            \n            while(cnt < n){\n                int best_idx = -1;\n                int min_val = Integer.MAX_VALUE;\n                for(int i = 0; i < n; i++){\n                    if(fin[i] == 0 && cur[i] < min_val){\n                        min_val = cur[i];\n                        best_idx = i;\n                    }\n                }\n                if(best_idx == -1) break;\n                \n                boolean moved = false;\n                if(cur[best_idx] -1 > 0){\n                    boolean possible = true;\n                    for(int j = 0; j < n; j++){\n                        if(j != best_idx && cur[j] == cur[best_idx]-1){\n                            possible = false;\n                            break;\n                        }\n                    }\n                    if(possible){\n                        cur[best_idx]--;\n                        moved = true;\n                    }\n                }\n                if(!moved && cur[best_idx] -2 > 0){\n                    boolean possible = true;\n                    for(int j = 0; j < n; j++){\n                        if(j != best_idx && cur[j] == cur[best_idx]-2){\n                            possible = false;\n                            break;\n                        }\n                    }\n                    if(possible){\n                        cur[best_idx] -= 2;\n                        moved = true;\n                    }\n                }\n                if(cur[best_idx] <= 0){\n                    fin[best_idx] = 1;\n                    cnt++;\n                }\n            }\n            \n            if(cnt == n) ans = (ans + 1) % mod;\n        } while (nextPermutation(p));\n        System.out.println(ans);\n    }\n\n    public static boolean nextPermutation(List<Integer> arr) {\n        int i = arr.size() - 2;\n        while (i >= 0 && arr.get(i) >= arr.get(i + 1)) {\n            i--;\n        }\n        if (i == -1) {\n            return false;\n        }\n        int j = arr.size() - 1;\n        while (arr.get(j) <= arr.get(i)) {\n            j--;\n        }\n        Collections.swap(arr, i, j);\n        Collections.reverse(arr.subList(i + 1, arr.size()));\n        return true;\n    }\n}\n```",
    "model": "gemini-1.5-flash",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct, and follows standard conventions for the specified language. Do not include any introductory text or output besides the code itself."
}