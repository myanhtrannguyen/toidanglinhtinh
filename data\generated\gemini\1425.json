{
    "solution_id": "gemini-1425",
    "problem_id": "p03932",
    "language": "C++",
    "solution": "```cpp\n#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nint main() {\n  int h, w;\n  cin >> h >> w;\n\n  vector<vector<long long>> a(h, vector<long long>(w));\n  for (int i = 0; i < h; ++i) {\n    for (int j = 0; j < w; ++j) {\n      cin >> a[i][j];\n    }\n  }\n\n  long long max_souvenirs = 0;\n  vector<pair<int, int>> path1, path2;\n  function<void(int, int, int, int, long long, vector<pair<int,int>>, vector<pair<int,int>>)> solve = \n    [&](int r1, int c1, int r2, int c2, long long current_souvenirs, vector<pair<int,int>> p1, vector<pair<int,int>> p2) {\n    current_souvenirs += a[r1][c1];\n    if (r1 == h -1 && c1 == w -1) {\n        current_souvenirs += a[r2][c2];\n        if (p1.size() + p2.size() == h + w -1 && r2 == h -1 && c2 == w -1)\n          max_souvenirs = max(max_souvenirs, current_souvenirs);\n        return;\n    }\n\n    p1.push_back({r1,c1});\n    \n    int dr[] = {0, 0, 1, -1};\n    int dc[] = {1, -1, 0, 0};\n\n    for (int i = 0; i < 4; ++i) {\n      int nr1 = r1 + dr[i];\n      int nc1 = c1 + dc[i];\n      if (nr1 >= 0 && nr1 < h && nc1 >= 0 && nc1 < w) {\n          bool visited1 = false;\n          for(auto p: p1) if(p.first == nr1 && p.second == nc1) visited1 = true;\n          \n          if(!visited1){\n              int nr2 = r2, nc2 = c2;\n              if(p1.size() + p2.size() < h + w -1){\n                bool used2 = false;\n                for(int j = 0; j < 4; ++j){\n                    int nnr2 = r2 + dr[j];\n                    int nnc2 = c2 + dc[j];\n                    if(nnr2 >= 0 && nnr2 < h && nnc2 >= 0 && nnc2 < w){\n                        bool visited2 = false;\n                        for(auto p: p2) if(p.first == nnr2 && p.second == nnc2) visited2 = true;\n                        \n                        if(!visited2){\n                            p2.push_back({r2,c2});\n                            solve(nr1, nc1, nnr2, nnc2, current_souvenirs, p1, p2);\n                            p2.pop_back();\n                        }\n                    }\n                }\n              } else {\n                  solve(nr1, nc1, nr2, nc2, current_souvenirs, p1, p2);\n              }\n              \n          }\n      }\n    }\n  };\n\n  solve(0, 0, 0, 0, 0, {}, {});\n\n  cout << max_souvenirs << endl;\n  return 0;\n}\n```",
    "model": "gemini-1.5-flash",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct, and follows standard conventions for the specified language. Do not include any introductory text or output besides the code itself."
}