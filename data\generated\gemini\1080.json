{
    "solution_id": "gemini-1080",
    "problem_id": "p03837",
    "language": "Java",
    "solution": "```java\nimport java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int m = sc.nextInt();\n        List<Edge> edges = new ArrayList<>();\n        for (int i = 0; i < m; i++) {\n            int u = sc.nextInt();\n            int v = sc.nextInt();\n            int w = sc.nextInt();\n            edges.add(new Edge(u, v, w));\n        }\n        sc.close();\n\n        int count = 0;\n        for (int i = 0; i < m; i++) {\n            boolean used = false;\n            for (int j = 1; j <= n; j++) {\n                for (int k = 1; k <= n; k++) {\n                    if (j == k) continue;\n                    int[][] dist = dijkstra(n, edges, i);\n                    if (dist[j][k] != Integer.MAX_VALUE) {\n                        int[][] dist2 = dijkstra(n, edges, -1);\n                        if (dist[j][k] == dist2[j][k]) {\n                            \n                            boolean edge_used = false;\n                            List<Integer> path = getPath(dist, j,k);\n                            for(int a = 0; a < path.size() -1; a++){\n                                if((edges.get(i).u == path.get(a) && edges.get(i).v == path.get(a+1)) || (edges.get(i).v == path.get(a) && edges.get(i).u == path.get(a+1)))\n                                    edge_used = true;\n                            }\n\n                            if(edge_used){\n                                used = true;\n                                break;\n                            }\n                            \n                        }\n                    }\n                }\n                if (used) break;\n            }\n            if (!used) count++;\n        }\n        System.out.println(count);\n    }\n\n\n    static int[][] dijkstra(int n, List<Edge> edges, int remove) {\n        int[][] dist = new int[n + 1][n + 1];\n        for (int i = 1; i <= n; i++) {\n            Arrays.fill(dist[i], Integer.MAX_VALUE);\n            dist[i][i] = 0;\n        }\n        List<Edge> cur_edges = new ArrayList<>(edges);\n        if(remove != -1) cur_edges.remove(remove);\n        for (Edge edge : cur_edges) {\n            dist[edge.u][edge.v] = Math.min(dist[edge.u][edge.v], edge.w);\n            dist[edge.v][edge.u] = Math.min(dist[edge.v][edge.u], edge.w);\n        }\n        for (int k = 1; k <= n; k++) {\n            for (int i = 1; i <= n; i++) {\n                for (int j = 1; j <= n; j++) {\n                    if (dist[i][k] != Integer.MAX_VALUE && dist[k][j] != Integer.MAX_VALUE) {\n                        dist[i][j] = Math.min(dist[i][j], dist[i][k] + dist[k][j]);\n                    }\n                }\n            }\n        }\n        return dist;\n    }\n    static List<Integer> getPath(int[][] dist, int start, int end){\n        List<Integer> path = new ArrayList<>();\n        path.add(start);\n        int cur = start;\n        while(cur != end){\n            for(int i = 1; i < dist.length; i++){\n                if(dist[cur][i] != Integer.MAX_VALUE && dist[cur][i] + dist[i][end] == dist[cur][end]){\n                    path.add(i);\n                    cur = i;\n                    break;\n                }\n            }\n        }\n        path.add(end);\n        return path;\n    }\n\n    static class Edge {\n        int u, v, w;\n\n        Edge(int u, int v, int w) {\n            this.u = u;\n            this.v = v;\n            this.w = w;\n        }\n    }\n}\n```",
    "model": "gemini-1.5-flash",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct, and follows standard conventions for the specified language. Do not include any introductory text or output besides the code itself."
}