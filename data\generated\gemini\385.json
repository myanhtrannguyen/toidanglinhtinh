{
    "solution_id": "gemini-385",
    "problem_id": "p03653",
    "language": "C",
    "solution": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    long long a;\n    long long b;\n    long long c;\n} Person;\n\nint compare_gold(const void *a, const void *b) {\n    Person *pa = (Person *)a;\n    Person *pb = (Person *)b;\n    return (pa->a > pb->a) ? -1 : 1;\n}\n\nint compare_silver(const void *a, const void *b) {\n    Person *pa = (Person *)a;\n    Person *pb = (Person *)b;\n    return (pa->b > pb->b) ? -1 : 1;\n}\n\nint compare_bronze(const void *a, const void *b) {\n    Person *pa = (Person *)a;\n    Person *pb = (Person *)b;\n    return (pa->c > pb->c) ? -1 : 1;\n}\n\nint main() {\n    long long x, y, z;\n    scanf(\"%lld %lld %lld\", &x, &y, &z);\n\n    long long n = x + y + z;\n    Person *people = (Person *)malloc(n * sizeof(Person));\n    for (long long i = 0; i < n; i++) {\n        scanf(\"%lld %lld %lld\", &people[i].a, &people[i].b, &people[i].c);\n    }\n\n    long long max_coins = 0;\n    long long *gold_indices = (long long *)malloc(x * sizeof(long long));\n    long long *silver_indices = (long long *)malloc(y * sizeof(long long));\n    long long *bronze_indices = (long long *)malloc(z * sizeof(long long));\n    \n    for (int i = 0; i < (1 << (2*n)); ++i) {\n        long long current_coins = 0;\n        long long gold_count = 0;\n        long long silver_count = 0;\n        long long bronze_count = 0;\n        long long used[n];\n        for (int j = 0; j < n; ++j) used[j] = 0;\n\n        for (int j = 0; j < n; ++j) {\n            if ((i >> (2*j)) & 1) {\n                if (gold_count < x && used[j] == 0) {\n                    current_coins += people[j].a;\n                    gold_count++;\n                    used[j] = 1;\n                }\n            } else if ((i >> (2*j + 1)) & 1) {\n                if (silver_count < y && used[j] == 0) {\n                    current_coins += people[j].b;\n                    silver_count++;\n                    used[j] = 1;\n                }\n            } else {\n                if (bronze_count < z && used[j] == 0) {\n                    current_coins += people[j].c;\n                    bronze_count++;\n                    used[j] = 1;\n                }\n            }\n        }\n        if (gold_count == x && silver_count == y && bronze_count == z) max_coins = (max_coins > current_coins) ? max_coins : current_coins;\n    }\n\n\n    printf(\"%lld\\n\", max_coins);\n    free(people);\n    free(gold_indices);\n    free(silver_indices);\n    free(bronze_indices);\n    return 0;\n}\n```",
    "model": "gemini-1.5-flash",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct, and follows standard conventions for the specified language. Do not include any introductory text or output besides the code itself."
}