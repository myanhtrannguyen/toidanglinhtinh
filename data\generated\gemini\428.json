{
    "solution_id": "gemini-428",
    "problem_id": "p03664",
    "language": "Java",
    "solution": "```java\nimport java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int m = sc.nextInt();\n        List<Edge> edges = new ArrayList<>();\n        for (int i = 0; i < m; i++) {\n            int u = sc.nextInt();\n            int v = sc.nextInt();\n            int c = sc.nextInt();\n            edges.add(new Edge(u, v, c));\n        }\n        long minCost = Long.MAX_VALUE;\n        for (int i = 0; i < (1 << m); i++) {\n            long currentCost = 0;\n            List<Edge> currentEdges = new ArrayList<>();\n            for (int j = 0; j < m; j++) {\n                if ((i >> j) % 2 == 0) {\n                    currentEdges.add(edges.get(j));\n                } else {\n                    currentCost += edges.get(j).cost;\n                }\n            }\n            if (isConnected(n, currentEdges) && isOnePath(n, currentEdges)) {\n                minCost = Math.min(minCost, currentCost);\n            }\n        }\n        System.out.println(minCost);\n    }\n\n    static boolean isConnected(int n, List<Edge> edges) {\n        boolean[] visited = new boolean[n + 1];\n        dfs(1, visited, edges);\n        for (int i = 1; i <= n; i++) {\n            if (!visited[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    static void dfs(int u, boolean[] visited, List<Edge> edges) {\n        visited[u] = true;\n        for (Edge edge : edges) {\n            if (edge.u == u && !visited[edge.v]) {\n                dfs(edge.v, visited, edges);\n            } else if (edge.v == u && !visited[edge.u]) {\n                dfs(edge.u, visited, edges);\n            }\n        }\n    }\n\n    static boolean isOnePath(int n, List<Edge> edges) {\n        if (edges.size() != n - 1) return false;\n        boolean[] visited = new boolean[n+1];\n        int count = 0;\n        dfs2(1, n, visited, edges, count);\n        return count == 1;\n\n    }\n\n    static int dfs2(int u, int n, boolean[] visited, List<Edge> edges, int count){\n        visited[u] = true;\n        if(u == n) count++;\n        for (Edge edge : edges) {\n            int v = (edge.u == u) ? edge.v : (edge.v == u ? edge.u : 0);\n            if(v != 0 && !visited[v]){\n                count = dfs2(v, n, visited.clone(), edges, count);\n            }\n        }\n        return count;\n    }\n\n\n    static class Edge {\n        int u, v, cost;\n\n        Edge(int u, int v, int cost) {\n            this.u = u;\n            this.v = v;\n            this.cost = cost;\n        }\n    }\n}\n```",
    "model": "gemini-1.5-flash",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct, and follows standard conventions for the specified language. Do not include any introductory text or output besides the code itself."
}