{
    "solution_id": "gemini-108",
    "problem_id": "p03579",
    "language": "Java",
    "solution": "```java\nimport java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int m = sc.nextInt();\n        List<List<Integer>> graph = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            graph.add(new ArrayList<>());\n        }\n        for (int i = 0; i < m; i++) {\n            int u = sc.nextInt() - 1;\n            int v = sc.nextInt() - 1;\n            graph.get(u).add(v);\n            graph.get(v).add(u);\n        }\n        Set<Pair> addedEdges = new HashSet<>();\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i == j) continue;\n                Queue<Pair> q = new LinkedList<>();\n                q.offer(new Pair(i, 0));\n                Set<Integer> visited = new HashSet<>();\n                visited.add(i);\n                boolean found = false;\n                while (!q.isEmpty()) {\n                    Pair p = q.poll();\n                    if (p.node == j && p.dist == 3) {\n                        found = true;\n                        break;\n                    }\n                    if (p.dist >= 3) continue;\n                    for (int neighbor : graph.get(p.node)) {\n                        if (!visited.contains(neighbor)) {\n                            visited.add(neighbor);\n                            q.offer(new Pair(neighbor, p.dist + 1));\n                        }\n                    }\n                }\n                if (found && !addedEdges.contains(new Pair(i, j)) && !addedEdges.contains(new Pair(j,i))) {\n                    addedEdges.add(new Pair(i, j));\n                    count++;\n                }\n            }\n        }\n        System.out.println(count);\n        sc.close();\n    }\n\n    static class Pair {\n        int node;\n        int dist;\n\n        Pair(int node, int dist) {\n            this.node = node;\n            this.dist = dist;\n        }\n        \n        @Override\n        public boolean equals(Object obj) {\n            if (this == obj) return true;\n            if (obj == null || getClass() != obj.getClass()) return false;\n            Pair pair = (Pair) obj;\n            return node == pair.node && dist == pair.dist;\n        }\n        @Override\n        public int hashCode(){\n            return Objects.hash(node,dist);\n        }\n    }\n}\n```",
    "model": "gemini-1.5-flash",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct, and follows standard conventions for the specified language. Do not include any introductory text or output besides the code itself."
}