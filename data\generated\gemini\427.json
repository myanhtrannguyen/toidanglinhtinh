{
    "solution_id": "gemini-427",
    "problem_id": "p03664",
    "language": "C",
    "solution": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\n#define INF 1e9\n\nint main() {\n    int n, m;\n    scanf(\"%d %d\", &n, &m);\n\n    int edges[m][3];\n    for (int i = 0; i < m; i++) {\n        scanf(\"%d %d %d\", &edges[i][0], &edges[i][1], &edges[i][2]);\n        edges[i][0]--; \n        edges[i][1]--; \n    }\n\n    long long min_cost = INF;\n    for (int i = 0; i < (1 << m); i++) {\n        long long current_cost = 0;\n        int adj[n][n];\n        for (int j = 0; j < n; j++) {\n            for (int k = 0; k < n; k++) {\n                adj[j][k] = 0;\n            }\n        }\n\n        for (int j = 0; j < m; j++) {\n            if (!((i >> j) & 1)) {\n                adj[edges[j][0]][edges[j][1]] = adj[edges[j][1]][edges[j][0]] = 1;\n            } else {\n                current_cost += edges[j][2];\n            }\n        }\n\n        int count = 0;\n        int visited[n];\n        for (int j = 0; j < n; j++) visited[j] = 0;\n        int q[n];\n        int head = 0, tail = 1;\n        q[0] = 0;\n        visited[0] = 1;\n        while (head < tail) {\n            int u = q[head++];\n            for (int v = 0; v < n; v++) {\n                if (adj[u][v] && !visited[v]) {\n                    visited[v] = 1;\n                    q[tail++] = v;\n                }\n            }\n        }\n        \n        int path_count = 0;\n        int path[n];\n        int path_len = 0;\n        int visited_path[n];\n        for(int k=0; k<n; ++k) visited_path[k] = 0;\n\n        function(0,adj,n,path,&path_len,visited_path, &path_count);\n\n\n        if (path_count == 1 && visited[n-1]) {\n            min_cost = (min_cost < current_cost) ? min_cost : current_cost;\n        }\n    }\n\n    printf(\"%lld\\n\", min_cost);\n\n    return 0;\n}\n\nvoid function(int u, int adj[][15], int n, int path[], int *path_len, int visited_path[], int* path_count){\n    path[*path_len] = u;\n    (*path_len)++;\n    visited_path[u] = 1;\n\n    if(u == n-1){\n        (*path_count)++;\n    } else {\n        for(int v=0; v<n; ++v){\n            if(adj[u][v] && !visited_path[v]){\n                function(v,adj,n,path, path_len, visited_path, path_count);\n            }\n        }\n    }\n\n    (*path_len)--;\n    visited_path[u] = 0;\n}\n```",
    "model": "gemini-1.5-flash",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct, and follows standard conventions for the specified language. Do not include any introductory text or output besides the code itself."
}